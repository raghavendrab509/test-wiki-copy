= java-beans =

ForRent Java Beans useful across multiple code bases.

== Compiling JAR ==

[source,sh]
----
./gradlew build
----

== Uploading Jar file to mavenrepo.forrent.com ==

=== Uploading from Local Machine ===

1. Merge changes to `upstream/master`.
2. Create a tag for the release (you can do this in GitHub). Tag name should be the semantic version of the release (e.g. `1.13.1`).
3. Check out tag.
4. Increment `tag_name` in `/gradle.properties` to match newly created tag name.
5. Set `maven_repo_username` and `maven_repo_password` in `/gradle.properties`. Request an account if you don't have one.
6. Run `./gradlew uploadArchives`.
7. Hosted versions can be found here: http://dsfrcsatis01.frmsystems.net:8080/index.html#artifact/com.forrent/java-beans

=== Uploading from Jenkins ===

Create a tag based off of the master branch or any branch.

* If creating a tag based off of master the tag name should follow the semantic versioning convention `\d.\d.\d`. For example 0.0.1.
* If creating a tag based off of other branches the tag name should be as follows `\d.\d.\d-.*`. For example 0.0.1-COR-4345.

Then log into Jenkins and run the "Deploy_Java-Beans_To_Maven" job. The job expects three parameters;

* tag_name: The name of the tag you created.
* maven_repo_username: The mavenrepo.forrent.com username
* maven_repo_password: The mavenrepo.forrent.com password

=== Automated Jenkins upload ===

Follow the directions in version.properties.example to format version.properties correctly.

Create review branch from the local repository.  Jenkins will then receive a webhook from github starting the upload.

Merge review branch into master when ready, and Jenkins will then start the other job, which will upload the final version which will 
have no reference to the review branch.
